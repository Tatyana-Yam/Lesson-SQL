/*Отобрать все шаги, в которых рассматриваются вложенные запросы (то есть в названии шага упоминаются вложенные запросы). Указать к какому уроку и модулю они относятся. 
Для этого вывести 3 поля:
в поле Модуль указать номер модуля и его название через пробел;
в поле Урок указать номер модуля, порядковый номер урока (lesson_position) через точку и название урока через пробел;
в поле Шаг указать номер модуля, порядковый номер урока (lesson_position) через точку, порядковый номер шага (step_position) через точку и название шага через пробел.
Длину полей Модуль и Урок ограничить 19 символами, при этом слишком длинные надписи обозначить многоточием в конце (16 символов - это номер модуля или урока, 
пробел и  название Урока или Модуля к ним присоединить "..."). 
Информацию отсортировать по возрастанию номеров модулей, порядковых номеров уроков и порядковых номеров шагов.*/
select concat(left(concat(module.module_id, ' ', module.module_name), 16), '...') as Модуль,
       concat(left(concat(module.module_id, '.', lesson.lesson_position, ' ', lesson.lesson_name), 16), '...')
       as Урок,
       concat(module.module_id, '.', lesson.lesson_position, '.', step.step_position, ' ', step.step_name)
       as Шаг
from lesson 
     inner join module using(module_id)
     inner join step using(lesson_id)
where step.step_name like '%вложенн%'
order by module.module_id, lesson.lesson_position, step.step_position

/*Еще одна возможность улучшить навигацию по курсу - это реализация поиска шагов по ключевым словам. 
Для этого необходимо создать таблицу с терминами keyword, а затем связать ее с таблицей step через вспомогательную таблицу step_keyword. 
Каждая запись этой таблицы - это id шага и id встречающегося на этом шаге ключевого слова.*/
insert into step_keyword (step_id, keyword_id)
select step.step_id, keyword.keyword_id
from keyword, step
where step_name REGEXP concat('\\b', keyword_name, '\\b');

select *
from step_keyword

/*Реализовать поиск по ключевым словам. Вывести шаги, с которыми связаны ключевые слова MAX и AVG одновременно. 
Для шагов указать id модуля, позицию урока в модуле, позицию шага в уроке через точку, после позиции шага перед заголовком - пробел. 
Позицию шага в уроке вывести в виде двух цифр (если позиция шага меньше 10, то перед цифрой поставить 0). Столбец назвать Шаг. 
Информацию отсортировать по первому столбцу в алфавитном порядке.*/
select concat(module.module_id, '.', lesson.lesson_position, '.', LPAD(step.step_position, 2, '0'), ' ', 
              t1.step_name) as Шаг
from module
    inner join lesson using(module_id)
    inner join step using(lesson_id)
    inner join
        (select step.step_name, count(keyword.keyword_name) as sount_name
        from step
            inner join step_keyword using(step_id)
            inner join keyword using(keyword_id)
        where keyword.keyword_name = "max" or keyword.keyword_name = "avg"
        group by step.step_name 
        having count(keyword.keyword_name) >= 2) t1
        on step.step_name = t1.step_name
order by Шаг

/*Посчитать, сколько студентов относится к каждой группе. Столбцы назвать Группа, Интервал, Количество. Указать границы интервала.*/
select Группа, 
    case
        when Группа = 'I' then 'от 0 до 10'
        when Группа = 'II' then 'от 11 до 15'
        when Группа = 'III' then 'от 16 до 27'
        when Группа = 'IV' then 'больше 27'
    END as Интервал,
    count(*) as Количество
from
    (select student_name, rate,
        case
            when rate <= 10 then 'I'
            when rate <= 15 then 'II'
            when rate <= 27 then 'III'
            else 'IV'
        END as Группа
    from
        (
        select student_name, count(*) as rate
        from
            (
            select student_name, step_id
            from student
                inner join step_student using(student_id)
            where result = 'correct'
            group by student_name, step_id
            ) query_in
        group by student_name
        order by 2
        ) query_in_1
    ) query_in_2
group by Группа

/*Для каждого шага вывести процент правильных решений. Информацию упорядочить по возрастанию процента верных решений. 
Столбцы результата назвать Шаг и Успешность, процент успешных решений округлить до целого.
Исправить запрос примера так: для шагов, которые  не имеют неверных ответов,  указать 100 как процент успешных попыток, если же шаг не имеет верных ответов, указать 0. 
Информацию отсортировать сначала по возрастанию успешности, а затем по названию шага в алфавитном порядке.*/
WITH get_count_correct(st_n_c, count_correct)
    AS(
        select step_name, count(*)
        from
           step
           inner join step_student using(step_id)
        where result = 'correct'
        group by step_name
      ),
      get_count_wrong(st_n_w, count_wrong)
      AS(
          select step_name, count(*)
          from
              step
              inner join step_student using(step_id)
          where result = 'wrong'
          group by step_name
      )
select st_n_c as Шаг,
    IF(ROUND(count_correct / (count_correct + count_wrong) * 100) is null, 100, 
       ROUND(count_correct / (count_correct + count_wrong) * 100)) as Успешность
from 
    get_count_correct
    LEFT JOIN get_count_wrong
    on st_n_c = st_n_w
UNION
select st_n_w as Шаг,
    IF(ROUND(count_correct / (count_correct + count_wrong) * 100) is NULL, 0,
       ROUND(count_correct / (count_correct + count_wrong) * 100)) as Успешность
from
    get_count_correct
    RIGHT JOIN get_count_wrong
    on st_n_c = st_n_w
ORDER BY 2, 1

/*Вычислить прогресс пользователей по курсу. Прогресс вычисляется как отношение верно пройденных шагов к общему количеству шагов в процентах, 
округленное до целого. В нашей базе данные о решениях занесены не для всех шагов, поэтому общее количество шагов определить как количество 
различных шагов в таблице step_student.
Тем пользователям, которые прошли все шаги (прогресс = 100%) выдать "Сертификат с отличием". Тем, у кого прогресс больше или равен 80% - "Сертификат". 
Для остальных записей в столбце Результат задать пустую строку ("").
Информацию отсортировать по убыванию прогресса, затем по имени пользователя в алфавитном порядке.*/
select student.student_name as Студент, t4.result_itog as Прогресс, 
    CASE
        WHEN t4.result_itog = 100 THEN 'Сертификат с отличием'
        WHEN t4.result_itog >= 80 THEN 'Сертификат'
        ELSE ""
    END
        as Результат
from
    student
    inner join
    (select t3.student_id, round((t3.correct_result * 100) / t2.count_step_id) as result_itog
    from
        (select student_id, count(distinct(step_id)) as correct_result
        from step_student
        where result = "correct"
        group by student_id) t3
            inner join     
            (select count(t1.count_step_id) as count_step_id
            from
                (select count(step_id) as count_step_id
                from step_student
                group by step_id) t1
             ) t2
         ) t4
      on student.student_id = t4.student_id
order by Прогресс desc, Студент


/*Для студента с именем student_61 вывести все его попытки: название шага, результат и дату отправки попытки (submission_time). 
Информацию отсортировать по дате отправки попытки и указать, сколько минут прошло между отправкой соседних попыток. 
Название шага ограничить 20 символами и добавить "...". 
Столбцы назвать Студент, Шаг, Результат, Дата_отправки, Разница.*/
select student.student_name as Студент, concat(left(step.step_name, 20), '...') as Шаг, 
    step_student.result as Результат,
    from_unixtime(t1.submission_time) as Дата_отправки, sec_to_time(t1.sec_time) as Разница
from
    student
    inner join step_student using (student_id)
    inner join step using (step_id)
    inner join
    (select submission_time, 
        ifnull(submission_time - LAG(submission_time) OVER (ORDER BY submission_time), 0) AS sec_time
    from step_student
    where student_id = 61
    order by submission_time) t1
    on step_student.submission_time = t1.submission_time
order by Дата_отправки

/*Посчитать среднее время, за которое пользователи проходят урок по следующему алгоритму:
для каждого пользователя вычислить время прохождения шага как сумму времени, потраченного на каждую попытку 
(время попытки - это разница между временем отправки задания и временем начала попытки), при этом попытки, которые длились больше 4 часов не учитывать, 
так как пользователь мог просто оставить задание открытым в браузере, а вернуться к нему на следующий день;
для каждого студента посчитать общее время, которое он затратил на каждый урок;
вычислить среднее время выполнения урока в часах, результат округлить до 2-х знаков после запятой;
вывести информацию по возрастанию времени, пронумеровав строки, для каждого урока указать номер модуля и его позицию в нем.
Столбцы результата назвать Номер, Урок, Среднее_время.*/
select row_number() over (order by avg_time) as Номер,
    concat(module_id, '.', lesson_position, ' ', lesson_name) as Урок, avg_time as Среднее_время
from module
    inner join lesson using (module_id)
    inner join (select lesson_name, round((avg(sum_time) / 3600), 2) as avg_time
    from lesson
        inner join
        (select lesson_id, student_id, sum(difference_time) as sum_time
        from
            step
            inner join (select step_id, student_id, (submission_time - attempt_time) as difference_time
            from step_student
            where (submission_time - attempt_time) < (4 * 3600)) t1
            using (step_id)
        group by student_id, lesson_id) t2
        using (lesson_id)
    group by lesson_id) t3
    using(lesson_name)
order by avg_time
