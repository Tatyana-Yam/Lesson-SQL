create table ordering as
select author, title, (
    select round(AVG(amount))
    from book
    ) as amount
from book
where amount < (
    select round(AVG(amount))
    from book
    );

select *
from ordering

create table ordering as
select title, author, (
        select max(price)
         from supply
         ) as price
      
from book
where amount > (select round(avg(amount))
                from book
               );

select *
from ordering

#Создать таблицу author
create table author (author_id int primary key auto_increment, name_author varchar(50))
insert into author (name_author)
values ('Булгаков М.А.'), ('Достоевский Ф.М.'), ('Есенин С.А.'), ('Пастернак Б.Л.');

# Создать таблицу book
create table book (
    book_id int primary key auto_increment,
    title varchar(50),
    author_id int not null,
    genre_id int,
    price decimal(8,2),
    amount int,
    FOREIGN KEY (author_id) REFERENCES author (author_id),
    FOREIGN KEY (genre_id) REFERENCES genre (genre_id);

#Создать таблицу book той же структуры, что и на предыдущем шаге. Будем считать, что при удалении автора из таблицы author, 
#должны удаляться все записи о книгах из таблицы book, написанные этим автором. 
#А при удалении жанра из таблицы genre для соответствующей записи book установить значение Null в столбце genre_id. 
create table book (
    book_id int primary key auto_increment,
    title varchar(50),
    author_id int not null,
    genre_id int,
    price decimal(8,2),
    amount int,
    FOREIGN KEY (author_id) REFERENCES author (author_id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES genre (genre_id) ON DELETE SET NULL
);

#Добавьте три последние записи (с ключевыми значениями 6, 7, 8) в таблицу book, первые 5 записей уже добавлены:
insert into book (title, author_id, genre_id, price, amount)
values ('Стихотворения и поэмы', 3, 2, 650.00, 15),
       ('Черный человек', 3, 2, 570.20, 6),
       ('Лирика', 4, 2, 518.99, 2);
       
#Вывести название, жанр и цену тех книг, количество которых больше 8, в отсортированном по убыванию цены виде.
select book.title, genre.name_genre, book.price
from
    book inner join genre
    on book.genre_id = genre.genre_id
where amount > 8
order by price desc

#Вывести все жанры, которые не представлены в книгах на складе.
select name_genre
from 
    genre left join book
    on genre.genre_id = book.genre_id
where title is null

#Сложение даты с числом
select
   date_add('2020-01-01', interval (FLOOR(RAND() * 365)) day)

#Необходимо в каждом городе провести выставку книг каждого автора в течение 2020 года. Дату проведения выставки выбрать случайным образом. 
#Создать запрос, который выведет город, автора и дату проведения выставки. Последний столбец назвать Дата. 
#Информацию вывести, отсортировав сначала в алфавитном порядке по названиям городов, а потом по убыванию дат проведения выставок.
select name_city, name_author,
   date_add('2020-01-01', interval (FLOOR(RAND() * 365)) day) as Дата
from author, city
order by name_city, Дата desc

# Вывести информацию о книгах (жанр, книга, автор), относящихся к жанру, включающему слово «роман» в отсортированном по названиям книг виде.
select name_genre, title, name_author
from book
    inner join genre on book.genre_id = genre.genre_id
    inner join author on author.author_id = book.author_id
where name_genre = 'Роман'
order by title

#Посчитать количество экземпляров  книг каждого автора из таблицы author.  
#Вывести тех авторов,  количество книг которых меньше 10, в отсортированном по возрастанию количества виде. 
#Последний столбец назвать Количество.
select name_author, sum(amount) as Количество
from author left join book
    on author.author_id = book.author_id
group by name_author
having sum(amount) < 10 or sum(amount) is null
order by Количество 

/*Вывести в алфавитном порядке всех авторов, которые пишут только в одном жанре. */
select name_author
from
    (select name_author, genre_id
        from
        (
         select name_author, genre_id
            from 
            author inner join book
            on author.author_id = book.author_id
         ) quentry_in
    group by author.name_author, book.genre_id
    ) tabl2
group by name_author
having count(name_author) = 1
order by name_author


