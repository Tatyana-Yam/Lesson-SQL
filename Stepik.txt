create table ordering as
select author, title, (
    select round(AVG(amount))
    from book
    ) as amount
from book
where amount < (
    select round(AVG(amount))
    from book
    );

select *
from ordering

create table ordering as
select title, author, (
        select max(price)
         from supply
         ) as price
      
from book
where amount > (select round(avg(amount))
                from book
               );

select *
from ordering

#Создать таблицу author
create table author (author_id int primary key auto_increment, name_author varchar(50))
insert into author (name_author)
values ('Булгаков М.А.'), ('Достоевский Ф.М.'), ('Есенин С.А.'), ('Пастернак Б.Л.');

# Создать таблицу book
create table book (
    book_id int primary key auto_increment,
    title varchar(50),
    author_id int not null,
    genre_id int,
    price decimal(8,2),
    amount int,
    FOREIGN KEY (author_id) REFERENCES author (author_id),
    FOREIGN KEY (genre_id) REFERENCES genre (genre_id);

#Создать таблицу book той же структуры, что и на предыдущем шаге. Будем считать, что при удалении автора из таблицы author, 
#должны удаляться все записи о книгах из таблицы book, написанные этим автором. 
#А при удалении жанра из таблицы genre для соответствующей записи book установить значение Null в столбце genre_id. 
create table book (
    book_id int primary key auto_increment,
    title varchar(50),
    author_id int not null,
    genre_id int,
    price decimal(8,2),
    amount int,
    FOREIGN KEY (author_id) REFERENCES author (author_id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES genre (genre_id) ON DELETE SET NULL
);

#Добавьте три последние записи (с ключевыми значениями 6, 7, 8) в таблицу book, первые 5 записей уже добавлены:
insert into book (title, author_id, genre_id, price, amount)
values ('Стихотворения и поэмы', 3, 2, 650.00, 15),
       ('Черный человек', 3, 2, 570.20, 6),
       ('Лирика', 4, 2, 518.99, 2);
       
#Вывести название, жанр и цену тех книг, количество которых больше 8, в отсортированном по убыванию цены виде.
select book.title, genre.name_genre, book.price
from
    book inner join genre
    on book.genre_id = genre.genre_id
where amount > 8
order by price desc

#Вывести все жанры, которые не представлены в книгах на складе.
select name_genre
from 
    genre left join book
    on genre.genre_id = book.genre_id
where title is null

#Сложение даты с числом
select
   date_add('2020-01-01', interval (FLOOR(RAND() * 365)) day)

#Необходимо в каждом городе провести выставку книг каждого автора в течение 2020 года. Дату проведения выставки выбрать случайным образом. 
#Создать запрос, который выведет город, автора и дату проведения выставки. Последний столбец назвать Дата. 
#Информацию вывести, отсортировав сначала в алфавитном порядке по названиям городов, а потом по убыванию дат проведения выставок.
select name_city, name_author,
   date_add('2020-01-01', interval (FLOOR(RAND() * 365)) day) as Дата
from author, city
order by name_city, Дата desc

# Вывести информацию о книгах (жанр, книга, автор), относящихся к жанру, включающему слово «роман» в отсортированном по названиям книг виде.
select name_genre, title, name_author
from book
    inner join genre on book.genre_id = genre.genre_id
    inner join author on author.author_id = book.author_id
where name_genre = 'Роман'
order by title

#Посчитать количество экземпляров  книг каждого автора из таблицы author.  
#Вывести тех авторов,  количество книг которых меньше 10, в отсортированном по возрастанию количества виде. 
#Последний столбец назвать Количество.
select name_author, sum(amount) as Количество
from author left join book
    on author.author_id = book.author_id
group by name_author
having sum(amount) < 10 or sum(amount) is null
order by Количество 

/*Вывести в алфавитном порядке всех авторов, которые пишут только в одном жанре. */
select name_author
from
    (select name_author, genre_id
        from
        (
         select name_author, genre_id
            from 
            author inner join book
            on author.author_id = book.author_id
         ) quentry_in
    group by author.name_author, book.genre_id
    ) tabl2
group by name_author
having count(name_author) = 1
order by name_author

/* Вывести информацию о книгах (название книги, фамилию и инициалы автора, название жанра, цену и количество экземпляров книг), 
написанных в самых популярных жанрах, в отсортированном в алфавитном порядке по названию книг виде. 
Самым популярным считать жанр, общее количество экземпляров книг которого на складе максимально.*/
select title, name_author, name_genre, price, amount
from author
    inner join book on author.author_id = book.author_id
    inner join genre on book.genre_id = genre.genre_id
    group by name_author, name_genre, title, price, amount, genre.genre_id
    having genre_id in
    (select query_in_1.genre_id
    from (select genre_id, sum(amount) as sum_amount
        from book
        group by genre_id
        ) query_in_1
        inner join
        (select genre_id, sum(amount) as sum_amount
        from book
        group by genre_id
        order by sum_amount desc
        limit 1
        ) query_in_2
        on query_in_1.sum_amount = query_in_2.sum_amount 
    )     
order by title     

/*Если в таблицах supply  и book есть одинаковые книги, которые имеют равную цену,  вывести их название и автора, 
а также посчитать общее количество экземпляров книг в таблицах supply и book,  
столбцы назвать Название, Автор  и Количество.*/
select book.title as Название, name_author as Автор, (book.amount + supply.amount) as Количество
from author 
    inner join book using(author_id)
    inner join supply
    on book.title = supply.title
    and author.name_author = supply.author
where book.price = supply.price

select title, name_author, name_genre, name_city
from author
    inner join book using(author_id)
    inner join genre using (genre_id)

select sum(amount) as sum_amount
    from book 
    group by author_id
    having sum(amount) > 5

select name_author, sum(amount), sum(price)
    from author
        inner join book using(author_id)
        inner join genre using (genre_id)
    group by name_author

select name_author, abs(sum(t1.sum_amount)*sum(t1.sum_price)) 
from (
    select name_author, sum(amount) as sum_amount, sum(price) as sum_price
    from author
            inner join book using(author_id)
            inner join genre using (genre_id)
    group by name_author) t1
group by name_author

/*Для книг, которые уже есть на складе (в таблице book), но по другой цене, чем в поставке (supply),  
необходимо в таблице book увеличить количество на значение, указанное в поставке,  и пересчитать цену. 
А в таблице  supply обнулить количество этих книг.*/
update book
    inner join author on author.author_id = book.author_id
    inner join supply on book.title = supply.title
                and supply.author = author.name_author
set book.price = abs(((book.price*book.amount)+(supply.price*supply.amount))/(book.amount+supply.amount)),
    book.amount = (book.amount + supply.amount),
    supply.amount = 0
where book.price != supply.price;
    
    
select * from book;

select * from supply;

/*Включить новых авторов в таблицу author с помощью запроса на добавление, а затем вывести все данные из таблицы author.  
Новыми считаются авторы, которые есть в таблице supply, но нет в таблице author.*/
insert into author (name_author)
select supply.author
from
    author
    right join supply
    on author.name_author = supply.author
where name_author is null;
    
select *
from author

/*добавить новые записи о книгах, которые есть в таблице supply и нет в таблице book. (В таблицах supply и book сохранены изменения предыдущих шагов).*/
insert into book (title, author_id, price, amount)
select title, author_id, price, amount
from
    author
    inner join supply
    on author.name_author = supply.author
where amount <> 0;

select *
from book

/* Занести для книги «Стихотворения и поэмы» Лермонтова жанр «Поэзия», а для книги «Остров сокровищ» Стивенсона - «Приключения». (Использовать два запроса).*/
update book
set genre_id = 2
where book_id = 10;

update book
set genre_id = 3
where book_id = 11;

select *
from book

/*Удалить всех авторов и все их книги, общее количество книг которых меньше 20.*/
delete from author
where author_id in 
    (select author_id
    from book
    group by author_id
    having sum(amount) < 20);
   
select *
from author;

select *
from book

/*Удалить все жанры, к которым относится меньше 4-х наименований книг. 
В таблице book для этих жанров установить значение Null.*/ 
delete from genre
where genre_id in
    (select genre_id
    from book
    group by genre_id
    having count(genre_id) < 4);

select * from genre;

select * from book;

/*Удалить всех авторов, которые пишут в жанре "Поэзия". 
Из таблицы book удалить все книги этих авторов. В запросе для отбора авторов использовать 
полное название жанра, а не его id.*/
delete from author
using
    author
    inner join book on author.author_id = book.author_id
    inner join genre on book.genre_id = genre.genre_id
where genre.name_genre in 
    (select genre.name_genre
     from genre
     where name_genre = 'Поэзия');

select * from author;

select * from book;


/*Включить авторов и названия книг из таблицы supply, если они отсутствуют в таблице book*/
insert into author (name_author)
select supply.author
from
    author
    right join supply
    on author.name_author = supply.author
where name_author is null;

select * from author;

insert into book (author_id, title)
select author.author_id, supply.title
from
    book
    right join author
    on book.author_id = author.author_id
    right join supply
    on author.name_author = supply.author
where book.author_id is null;

select * from book

